
name: Deploy API Gateway with Docker Compose (Local Build)

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Maven Clean and Package API Gateway
        run: mvn clean package -DskipTests
        # working-directory: . (mặc định, vì dự án nằm ở thư mục gốc của repo)

      # ==========================================================
      # TẠO docker-compose.yml CHỈ CHO API GATEWAY TRÊN RUNNER
      # ==========================================================
      - name: Create docker-compose.yml on runner
        run: |
          cat <<EOF > docker-compose.yml
          version: '3.8'
          name: planbook-api-gateway-stack # Tên stack duy nhất cho API Gateway

          services:
            api-gateway:
              build:
                context: . # Build context là thư mục gốc của repo hiện tại
                dockerfile: Dockerfile # Dockerfile nằm ở thư mục gốc của repo hiện tại
              image: planbook-api-gateway:latest # Tên image
              container_name: planbook-api-gateway
              restart: always
              ports:
                - "8080:8080" # API Gateway lắng nghe trên cổng 8080 của VPS
              environment:
                # Các biến môi trường cần thiết cho API Gateway
                SPRING_PROFILES_ACTIVE: "prod"
                SERVER_PORT: 8080 # Cổng nội bộ của API Gateway
                SPRING_APPLICATION_NAME: "api-gateway"
                # Không cần các biến môi trường cho DB, Kafka, Redis ở đây
                # Zookeeper connect-string sẽ được đọc từ application.properties trong JAR
          EOF
        shell: bash

      - name: Copy Project Files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "target/*.jar, docker-compose.yml"
          target: /var/www/api-gateway/

      - name: Stop and Remove Old API Gateway Container on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Đảm bảo thư mục đích tồn tại trên VPS trước khi cd vào
            sudo mkdir -p /var/www/api-gateway
            sudo chown -R ${{ secrets.VPS_USER }}:${{ secrets.VPS_USER }} /var/www/api-gateway

            cd /var/www/api-gateway || { echo "Error: /var/www/api-gateway directory not found on VPS."; exit 1; }
            echo "Checking and freeing up port 8080..." # Cổng mà API Gateway sẽ chiếm
            PORT_TO_FREE=8080
            PID_ON_PORT=$(sudo lsof -t -i :$PORT_TO_FREE)
            if [ -n "$PID_ON_PORT" ]; then
              echo "Found process on port $PORT_TO_FREE with PID: $PID_ON_PORT. Attempting to kill it..."
              sudo kill -9 $PID_ON_PORT 2>/dev/null || true
              sleep 1
              if sudo lsof -i :$PORT_TO_FREE > /dev/null; then
                echo "Warning: Port $PORT_TO_FREE is still in use after killing process. Manual intervention may be needed."
              else
                echo "Port $PORT_TO_FREE is now free."
              fi
            else
              echo "Port $PORT_TO_FREE is already free."
            fi

            echo "Stopping and removing old API Gateway Docker Compose stack if it exists..."
            # Sử dụng --project-name để chỉ dừng stack của API Gateway
            docker compose -f docker-compose.yml --project-name planbook-api-gateway-stack down 2>/dev/null || true

            echo "Cleaning up old API Gateway image if it exists..."
            docker rmi planbook-api-gateway:latest 2>/dev/null || true

            echo "Old API Gateway container and image cleaned up."

      - name: Start API Gateway with Docker Compose on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/api-gateway || { echo "Error: /var/www/api-gateway directory not found on VPS."; exit 1; }
            echo "Building and starting API Gateway Docker Compose services..."
            # Sử dụng --project-name để chỉ khởi động stack của API Gateway
            docker compose -f docker-compose.yml --project-name planbook-api-gateway-stack up --build -d --remove-orphans
            echo "API Gateway Docker Compose services started. Use 'docker compose logs -f planbook-api-gateway' to monitor logs."
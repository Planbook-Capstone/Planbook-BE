# File: .github/workflows/reusable/deploy-auth-service.yml
# PHIÊN BẢN ĐÃ SỬA LỖI HOÀN CHỈNH

name: Reusable Deploy Auth Service

on:
  workflow_call:
    inputs:
      service_path:
        description: 'Đường dẫn đến thư mục Auth Service'
        required: true
        type: string
      vps_target_path:
        description: 'Đường dẫn đích trên VPS cho service này'
        required: true
        type: string
    secrets:
      # Danh sách đầy đủ các secret mà workflow này cần
      PRIVATE_KEY_PEM:
        required: true
      PUBLIC_KEY_PEM:
        required: true
      VPS_HOST:
        required: true
      VPS_USER:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      DB_URL:
        required: true
      DB_USERNAME:
        required: true
      DB_PASSWORD:
        required: true
      SUPABASE_JWT_SECRET_KEY:
        required: true
      SPRING_APP_SECRET_KEY:
        required: true
      KAFKA_TOPIC:
        required: true
      MAIL_HOST:
        required: true
      MAIL_PORT:
        required: true
      MAIL_USERNAME:
        required: true
      MAIL_PASSWORD:
        required: true
      APP_DURATION:
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Write RSA Private/Public Keys to file
        working-directory: ${{ inputs.service_path }}
        run: |
          # Ghi các key vào src/main/resources để Maven đóng gói chúng vào file JAR
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Maven Clean and Package
        working-directory: ${{ inputs.service_path }}
        run: mvn clean package -DskipTests

      - name: Create docker-compose.yml on runner
        working-directory: ${{ inputs.service_path }}
        run: |
          cat <<EOF > docker-compose.yml
          version: '3.8'

          services:
            zookeeper:
              image: zookeeper:latest
              container_name: zookeeper
              restart: always
              ports:
                - "2181:2181"
              environment:
                ZOO_CLIENT_PORT: 2181
              volumes:
                - zookeeper_data:/data
                - zookeeper_datalog:/datalog

            kafka:
              image: confluentinc/cp-kafka:7.5.0
              container_name: kafka
              restart: always
              ports:
                - "9092:9092"
              environment:
                KAFKA_BROKER_ID: 1
                KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST:${{ secrets.VPS_HOST }}:9092
                KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
                KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
                KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
              volumes:
                - kafka_data:/var/lib/kafka/data
              depends_on:
                - zookeeper

            kafdrop:
              image: obsidiandynamics/kafdrop:latest
              container_name: kafdrop
              restart: always
              ports:
                - "9000:9000"
              environment:
                KAFKA_BROKERCONNECT: kafka:29092
                JVM_OPTS: "-Xms16M -Xmx48M"
              depends_on:
                - kafka

            redis:
              image: redis:latest
              container_name: redis
              restart: always
              ports:
                - "6379:6379"
              volumes:
                - redis_data:/data

            backend:
              build:
                context: .
                dockerfile: Dockerfile
              image: planbook-be:latest
              container_name: planbook-be
              restart: always
              ports:
                # SỬA LỖI: Đổi cổng host sang 8081 để tránh xung đột với API Gateway (vẫn dùng cổng 8080)
                - "8081:8080"
              environment:
                # Các biến môi trường cho key không còn cần thiết vì chúng đã được đóng gói trong JAR
                SPRING_DATASOURCE_URL: "${{ secrets.DB_URL }}"
                SPRING_DATASOURCE_USERNAME: "${{ secrets.DB_USERNAME }}"
                SPRING_DATASOURCE_PASSWORD: "${{ secrets.DB_PASSWORD }}"
                SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: "org.hibernate.dialect.MySQL8Dialect"
                SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
                SPRING_MAIN_ALLOW_CIRCULAR_REFERENCES: "true"
                SPRING_MVC_PATHMATCH_MATCHING_STRATEGY: "ANT_PATH_MATCHER"
                SUPABASE_JWT_SECRET: "${{ secrets.SUPABASE_JWT_SECRET_KEY }}"
                SPRING_SECRETKEY: "${{ secrets.SPRING_APP_SECRET_KEY }}"
                SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:29092"
                KAFKA_TOPIC_NAME: "${{ secrets.KAFKA_TOPIC }}"
                SPRING_MAIL_HOST: "${{ secrets.MAIL_HOST }}"
                SPRING_MAIL_PORT: "${{ secrets.MAIL_PORT }}"
                SPRING_MAIL_USERNAME: "${{ secrets.MAIL_USERNAME }}"
                SPRING_MAIL_PASSWORD: "${{ secrets.MAIL_PASSWORD }}"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: "true"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: "true"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED: "true"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_CONNECTIONTIMEOUT: "5000"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_TIMEOUT: "5000"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_WRITETIMEOT: "5000"
                SPRING_MAIL_DEFAULT_ENCODING: "UTF-8"
                SPRING_DATA_REDIS_HOST: "redis"
                SPRING_DATA_REDIS_PORT: "6379"
                SPRING_CACHE_TYPE: "redis"
                SPRING_DURATION: "${{ secrets.APP_DURATION }}"
                SPRING_PROFILES_ACTIVE: "prod"
              depends_on:
                - zookeeper
                - kafka
                - redis
          volumes:
            zookeeper_data:
            zookeeper_datalog:
            kafka_data:
            redis_data:
          EOF
        shell: bash

      - name: Copy Project Files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "${{ inputs.service_path }}/target/*.jar, ${{ inputs.service_path }}/Dockerfile, ${{ inputs.service_path }}/docker-compose.yml"
          target: ${{ inputs.vps_target_path }}

      - name: Stop and Remove Old Containers on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo mkdir -p ${{ inputs.vps_target_path }}
            sudo chown -R ${{ secrets.VPS_USER }}:${{ secrets.VPS_USER }} ${{ inputs.vps_target_path }}
            cd ${{ inputs.vps_target_path }} || exit 1
            
            echo "Stopping and removing old Docker Compose stack if it exists..."
            # Dừng toàn bộ stack cũ dựa trên file docker-compose.yml hiện tại
            docker compose down 2>/dev/null || true
            
            echo "Cleaning up old backend image..."
            docker rmi planbook-be:latest 2>/dev/null || true
            
            echo "Old containers and image cleaned up."

      - name: Start Application with Docker Compose on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ inputs.vps_target_path }} || exit 1
            echo "Building and starting Docker Compose services..."
            docker compose up --build -d --remove-orphans
            echo "Docker Compose services started. Use 'docker compose logs -f' to monitor logs."
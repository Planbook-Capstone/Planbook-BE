name: Deploy Spring Boot Backend

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Maven Clean
        run: mvn clean

      - name: Maven Package (Skip Tests)
        run: mvn package -DskipTests

      - name: Get JAR file name
        id: get_jar_name
        run: |
          JAR_NAME=$(ls target/*.jar | head -1)
          echo "JAR_NAME=$JAR_NAME" >> $GITHUB_OUTPUT
          echo "Detected JAR: $JAR_NAME"

      - name: Clean up old deployment on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/be || { echo "Error: /var/www/be directory not found on VPS."; exit 1; }
            echo "Performing deep cleanup on VPS before new copy..."
            PID=$(sudo lsof -t -i :8080)
            if [ -n "$PID" ]; then
              echo "Killing existing process on port 8080 (PID: $PID)"
              sudo kill -9 $PID
              sleep 5
            else
              echo "No existing process found on port 8080."
            fi
            sudo rm -rf *.jar target/ application.log
            echo "Cleanup complete."

      - name: Copy JAR to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ${{ steps.get_jar_name.outputs.JAR_NAME }}
          target: /var/www/be/

      # === BƯỚC MỚI: KIỂM TRA FILE SAU KHI COPY ===
      - name: Verify JAR copied to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Verifying JAR file on VPS..."
            ls -l /var/www/be/ # Liệt kê nội dung thư mục đích
            if [ -f "/var/www/be/$(basename ${{ steps.get_jar_name.outputs.JAR_NAME }})" ]; then
              echo "JAR file successfully copied to /var/www/be/."
            else
              echo "Error: JAR file NOT found in /var/www/be/ after copy operation."
              exit 1 # Thoát workflow nếu không tìm thấy file
            fi
            echo "Verification complete."
      # ============================================

      - name: Start Application on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/be || { echo "Error: /var/www/be directory not found on VPS."; exit 1; }

            NEW_JAR_FULL_NAME=$(ls *.jar | head -1)
            if [ -z "$NEW_JAR_FULL_NAME" ]; then
              echo "Error: No JAR file found after SCP. This should not happen if previous steps succeeded."
              exit 1
            fi
            mv "$NEW_JAR_FULL_NAME" be.jar
            echo "Renamed $NEW_JAR_FULL_NAME to be.jar"

            echo "Exporting environment variables..."
            export SPRING_DATASOURCE_URL="${{ secrets.DB_URL }}"
            export SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}"
            export SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT="org.hibernate.dialect.MySQL8Dialect"
            export SPRING_JPA_HIBERNATE_DDL_AUTO="update"
            export SPRING_MAIN_ALLOW_CIRCULAR_REFERENCES="true"
            export SPRING_MVC_PATHMATCH_MATCHING_STRATEGY="ANT_PATH_MATCHER"
            export SUPABASE_JWT_SECRET="${{ secrets.SUPABASE_JWT_SECRET_KEY }}"
            export SPRING_SECRETKEY="${{ secrets.SPRING_APP_SECRET_KEY }}"
            export SPRING_KAFKA_BOOTSTRAP_SERVERS="${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}"
            export KAFKA_TOPIC_NAME="${{ secrets.KAFKA_TOPIC }}"
            export SPRING_MAIL_HOST="${{ secrets.MAIL_HOST }}"
            export SPRING_MAIL_PORT="${{ secrets.MAIL_PORT }}"
            export SPRING_MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}"
            export SPRING_MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"
            export SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH="true"
            export SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE="true"
            export SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED="true"
            export SPRING_MAIL_PROPERTIES_MAIL_SMTP_CONNECTIONTIMEOUT="5000"
            export SPRING_MAIL_PROPERTIES_MAIL_SMTP_TIMEOUT="5000"
            export SPRING_MAIL_PROPERTIES_MAIL_SMTP_WRITETIMEOUT="5000"
            export SPRING_MAIL_DEFAULT_ENCODING="UTF-8"
            export SPRING_DATA_REDIS_HOST="${{ secrets.REDIS_HOST }}"
            export SPRING_DATA_REDIS_PORT="${{ secrets.REDIS_PORT }}"
            export SPRING_CACHE_TYPE="redis"
            export SPRING_DURATION="${{ secrets.APP_DURATION }}"
            export SPRING_PROFILES_ACTIVE="prod"

            echo "Starting new application instance..."
            nohup java -jar be.jar > application.log 2>&1 &
            echo "Application started. Check logs on VPS with 'tail -f /var/www/be/application.log'"
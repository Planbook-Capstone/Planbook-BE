name: Build and Deploy Directly to VPS

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Write RSA Private/Public Keys for Auth Service
        run: |
          mkdir -p auth-service/src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > auth-service/src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > auth-service/src/main/resources/keys/public.pem

      - name: Build Auth Service JAR
        run: mvn clean package -DskipTests
        working-directory: ./auth-service

      - name: Build API Gateway JAR
        run: mvn clean package -DskipTests
        working-directory: ./api-gateway

      - name: Prepare Deployment Package
        run: |
          mkdir -p deploy_package
          mkdir -p deploy_package/auth-service
          cp auth-service/target/*.jar deploy_package/auth-service/app.jar
          cp auth-service/Dockerfile deploy_package/auth-service/Dockerfile

          mkdir -p deploy_package/api-gateway
          cp api-gateway/target/*.jar deploy_package/api-gateway/app.jar
          cp api-gateway/Dockerfile deploy_package/api-gateway/Dockerfile

          # SỬA LỖI YAML: Sử dụng 'EOF' để ngăn shell nội suy và bọc các biến trong dấu ngoặc kép
          cat <<'EOF' > deploy_package/docker-compose.yml
          name: planbook-monorepo-stack

          services:
            zookeeper:
              image: zookeeper:latest
              container_name: zookeeper
              restart: always
              ports: ["2181:2181"]
              volumes: [zookeeper_data:/data, zookeeper_datalog:/datalog]

            kafka:
              image: confluentinc/cp-kafka:7.5.0
              container_name: kafka
              restart: always
              ports: ["9092:9092"]
              environment:
                KAFKA_BROKER_ID: 1
                KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${{ secrets.VPS_HOST }}:9092"
                KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
                KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
                KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
              volumes: [kafka_data:/var/lib/kafka/data]
              depends_on: [zookeeper]

            kafdrop:
              image: obsidiandynamics/kafdrop:latest
              container_name: kafdrop
              restart: always
              ports: ["9000:9000"]
              environment: { KAFKA_BROKERCONNECT: "kafka:29092", JVM_OPTS: "-Xms16M -Xmx48M" }
              depends_on: [kafka]

            redis:
              image: redis:latest
              container_name: redis
              restart: always
              ports: ["6379:6379"]
              volumes: [redis_data:/data]

            auth-service:
              build:
                context: ./auth-service
              container_name: planbook-auth-service
              restart: always
              ports: ["8081:8080"]
              environment:
                SPRING_DATASOURCE_URL: "${{ secrets.DB_URL }}"
                SPRING_DATASOURCE_USERNAME: "${{ secrets.DB_USERNAME }}"
                SPRING_DATASOURCE_PASSWORD: "${{ secrets.DB_PASSWORD }}"
                SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: "org.hibernate.dialect.MySQL8Dialect"
                SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
                SPRING_MVC_PATHMATCH_MATCHING_STRATEGY: "ANT_PATH_MATCHER"
                SUPABASE_JWT_SECRET: "${{ secrets.SUPABASE_JWT_SECRET_KEY }}"
                SPRING_SECRETKEY: "${{ secrets.SPRING_APP_SECRET_KEY }}"
                SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:29092"
                KAFKA_TOPIC_NAME: "${{ secrets.KAFKA_TOPIC }}"
                SPRING_MAIL_HOST: "${{ secrets.MAIL_HOST }}"
                SPRING_MAIL_PORT: "${{ secrets.MAIL_PORT }}"
                SPRING_MAIL_USERNAME: "${{ secrets.MAIL_USERNAME }}"
                SPRING_MAIL_PASSWORD: "${{ secrets.MAIL_PASSWORD }}"
                SPRING_DATA_REDIS_HOST: "redis"
                SPRING_DATA_REDIS_PORT: "6379"
                SPRING_CACHE_TYPE: "redis"
                SPRING_DURATION: "${{ secrets.APP_DURATION }}"
                SPRING_PROFILES_ACTIVE: "prod"
                SERVER_PORT: 8080
              depends_on: [kafka, redis]

            api-gateway:
              build:
                context: ./api-gateway
              container_name: planbook-api-gateway
              restart: always
              ports: ["8080:8080"]
              environment:
                SPRING_PROFILES_ACTIVE: "prod"
                SERVER_PORT: 8080
                SPRING_APPLICATION_NAME: "api-gateway"
              depends_on: [zookeeper]

          volumes:
            zookeeper_data:
            zookeeper_datalog:
            kafka_data:
            redis_data:
          EOF

      - name: Create Directory and Set Permissions on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            APP_DIR="/var/www/planbook-be"
            sudo mkdir -p $APP_DIR
            sudo chown -R $USER:$USER $APP_DIR

      - name: Copy Deployment Package to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./deploy_package/*"
          target: "/var/www/planbook-be"
          strip_components: 1

      - name: Run Docker Compose on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/planbook-be
            echo "Starting deployment..."
            docker compose up -d --build --force-recreate auth-service api-gateway
            echo "Cleaning up old Docker images..."
            docker image prune -af
            echo "Deployment completed successfully!"
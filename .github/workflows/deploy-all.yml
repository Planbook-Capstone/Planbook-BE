name: Build & Deploy All Microservices

on:
  push:
    branches:
      - master

jobs:
  detect-changes:
      runs-on: ubuntu-latest
      outputs:
        discovery_server: ${{ steps.filter.outputs.discovery_server }}
        identity_service: ${{ steps.filter.outputs.identity_service }}
        api_gateway: ${{ steps.filter.outputs.api_gateway }}
        master_data_service: ${{ steps.filter.outputs.master_data_service }}
        purchase_service: ${{ steps.filter.outputs.purchase_service }}
        exam_service: ${{ steps.filter.outputs.exam_service }}
        grading_service: ${{ steps.filter.outputs.grading_service }}
        external_caller_service: ${{ steps.filter.outputs.external_caller_service }}
        external_tool_config_service: ${{ steps.filter.outputs.external_tool_config_service }}
        slide_template_service: ${{ steps.filter.outputs.slide_template_service }}
        websocket_service: ${{ steps.filter.outputs.websocket_service }}
        email_service: ${{ steps.filter.outputs.email_service }}
        academic_resource_service: ${{ steps.filter.outputs.academic_resource_service }}
        lesson_plan_template_service: ${{ steps.filter.outputs.lesson_plan_template_service }}
        tool_log_service: ${{ steps.filter.outputs.tool_log_service }}
        workspace_service: ${{ steps.filter.outputs.workspace_service }}
        aggregator: ${{ steps.filter.outputs.aggregator }}
        deploy_files: ${{ steps.filter.outputs.deploy_files }}
      steps:
        - uses: actions/checkout@v4

        - name: Detect changed folders
          id: filter
          uses: dorny/paths-filter@v3
          with:
            filters: |
              discovery_server:
                - 'discovery-server/**'
              identity_service:
                - 'identity-service/**'
              api_gateway:
                - 'PlanBook-Gateway/**'
              master_data_service:
                - 'master-data-service/**'
              purchase_service:
                - 'purchase-service/**'
              exam_service:
                - 'exam-service/**'
              grading_service:
                - 'grading-service/**'
              external_caller_service:
                - 'external-caller-service/**'
              external_tool_config_service:
                - 'external-tool-service/**'
              slide_template_service:
                - 'slide-template-service/**'
              websocket_service:
                - 'websocket-service/**'
              email_service:
                - 'email-service/**'
              academic_resource_service:
                - 'academic-resource-service/**'
              lesson_plan_template_service:
                - 'lesson-plan-service/**'
              tool_log_service:
                - 'tool-log-service/**'
              workspace_service:
                - 'workspace-service/**'
              aggregator:
                - 'PlanBook-Aggregator/**'
              deploy_files:
                - 'deploy/docker-compose.yml'
  # Discovery Server
  build-discovery-server:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.discovery_server == 'true'
    defaults:
      run:
        working-directory: discovery-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Discovery Server image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-discovery-server:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-discovery-server:latest

  # Identity Service
  build-identity-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.identity_service == 'true'
    defaults:
      run:
        working-directory: identity-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Verify JAR content includes keys
        run: |
          jar tf target/*.jar | grep keys/private.pem
          jar tf target/*.jar | grep keys/public.pem

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Identity Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-identity-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-identity-service:latest

  # API Gateway
  build-api-gateway:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api_gateway == 'true'
    defaults:
      run:
        working-directory: PlanBook-Gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push API Gateway image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-gateway:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-gateway:latest

  # Master Data Service
  build-master-data-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.master_data_service == 'true'
    defaults:
      run:
        working-directory: master-data-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Master Data Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-master-data-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-master-data-service:latest

  # Purchase Service
  build-purchase-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.purchase_service == 'true'
    defaults:
      run:
        working-directory: purchase-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Purchase Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-purchase-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-purchase-service:latest

  # Exam Service
  build-exam-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.exam_service == 'true'
    defaults:
      run:
        working-directory: exam-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Exam Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-exam-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-exam-service:latest


# Grading Service
  build-grading-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.grading_service == 'true'
    defaults:
      run:
        working-directory: grading-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push grading Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-grading-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-grading-service:latest

  # External Caller Service
  build-external-caller-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.external_caller_service == 'true'
    defaults:
      run:
        working-directory: external-caller-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push External Caller Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-external-caller-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-external-caller-service:latest

  # External Tool Config Service
  build-external-tool-config-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.external_tool_config_service == 'true'
    defaults:
      run:
        working-directory: external-tool-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push External Tool Config Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-external-tool-config-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-external-tool-config-service:latest

  # Slide Template Service
  build-slide-template-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.slide_template_service == 'true'
    defaults:
      run:
        working-directory: slide-template-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Slide Template Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-slide-template-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-slide-template-service:latest

  # Websocket Service
  build-websocket-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.websocket_service == 'true'
    defaults:
      run:
        working-directory: websocket-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Websocket Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-websocket-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-websocket-service:latest

  # Email Service
  build-email-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.email_service == 'true'
    defaults:
      run:
        working-directory: email-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Email Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-email-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-email-service:latest

  # Academic Resource Service
  build-academic-resource-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.academic_resource_service == 'true'
    defaults:
      run:
        working-directory: academic-resource-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Academic Resource Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-academic-resource-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-academic-resource-service:latest

  # Lesson Plan Template Service
  build-lesson-plan-template-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.lesson_plan_template_service == 'true'
    defaults:
      run:
        working-directory: lesson-plan-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Lesson Plan Template Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-lesson-plan-template-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-lesson-plan-template-service:latest

  # Tool Log Service
  build-tool-log-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.tool_log_service == 'true'
    defaults:
      run:
        working-directory: tool-log-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Tool Log Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-tool-log-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-tool-log-service:latest

  # Workspace Service
  build-workspace-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.workspace_service == 'true'
    defaults:
      run:
        working-directory: workspace-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Workspace Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-workspace-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-workspace-service:latest

  # Aggregator Service
  build-aggregator:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.aggregator == 'true'
    defaults:
      run:
        working-directory: PlanBook-Aggregator
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Aggregator Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-aggregator:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-aggregator:latest

  deploy:
    runs-on: ubuntu-latest
    if: always()                
    needs:
      - detect-changes
      - build-discovery-server
      - build-identity-service
      - build-api-gateway
      - build-master-data-service
      - build-purchase-service
      - build-exam-service
      - build-grading-service
      - build-external-caller-service
      - build-external-tool-config-service
      - build-slide-template-service
      - build-websocket-service
      - build-email-service
      - build-academic-resource-service
      - build-lesson-plan-template-service
      - build-tool-log-service
      - build-workspace-service
      - build-aggregator
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure deploy folder exists
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /var/www/planbook-be

      - name: Copy docker-compose.yml to VPS
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deploy/docker-compose.yml"
          target: "/var/www/planbook-be/"
          strip_components: 1

      - name: Create .env from secrets
        run: |
          cat > .env <<'EOF'
          ${{ secrets.ENV_FILE }}
          EOF
          test -s .env || (echo "❌ .env is empty (check ENV_FILE secret)" && exit 1)
          echo "✅ .env file created successfully"

      - name: Copy .env to VPS
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ".env"
          target: "/var/www/planbook-be/"

      - name: Verify files on VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/planbook-be
            echo "📁 Files in deployment directory:"
            ls -la
            echo "🔍 Checking docker-compose.yml:"
            if [ -f "docker-compose.yml" ]; then
              echo "✅ docker-compose.yml exists"
              head -5 docker-compose.yml
            else
              echo "❌ docker-compose.yml not found"
            fi
            echo "🔍 Checking .env:"
            if [ -f ".env" ]; then
              echo "✅ .env exists"
              echo "DOCKERHUB_USERNAME in .env:"
              grep "DOCKERHUB_USERNAME" .env || echo "❌ DOCKERHUB_USERNAME not found"
            else
              echo "❌ .env not found"
            fi

      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

            cd /var/www/planbook-be

            echo "📁 Current directory contents:"
            ls -la

            echo "🧹 Do NOT stop all containers (keep uptime)."
            # docker compose -f docker-compose.yml down --remove-orphans || true

            echo "📦 Pull INFRA services only if image is missing..."
            docker compose -f docker-compose.yml pull --policy=missing kafka kafdrop debezium dozzle portainer discovery-server || true

            echo "🔎 Compute changed APP services from CI outputs..."
            APP_SERVICES=""

            [ "${{ needs.detect-changes.outputs.api_gateway }}" = "true" ] && APP_SERVICES="$APP_SERVICES api-gateway"
            [ "${{ needs.detect-changes.outputs.identity_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES identity-service"
            [ "${{ needs.detect-changes.outputs.master_data_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES master-data-service"
            [ "${{ needs.detect-changes.outputs.purchase_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES purchase-service"
            [ "${{ needs.detect-changes.outputs.exam_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES exam-service"
            [ "${{ needs.detect-changes.outputs.grading_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES grading-service"
            [ "${{ needs.detect-changes.outputs.external_caller_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES external-caller-service"
            [ "${{ needs.detect-changes.outputs.external_tool_config_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES external-tool-config-service"
            [ "${{ needs.detect-changes.outputs.slide_template_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES slide-template-service"
            [ "${{ needs.detect-changes.outputs.websocket_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES websocket-service"
            [ "${{ needs.detect-changes.outputs.email_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES email-service"
            [ "${{ needs.detect-changes.outputs.academic_resource_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES academic-resource-service"
            [ "${{ needs.detect-changes.outputs.lesson_plan_template_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES lesson-plan-template-service"
            [ "${{ needs.detect-changes.outputs.tool_log_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES tool-log-service"
            [ "${{ needs.detect-changes.outputs.workspace_service }}" = "true" ] && APP_SERVICES="$APP_SERVICES workspace-service"
            [ "${{ needs.detect-changes.outputs.aggregator }}" = "true" ] && APP_SERVICES="$APP_SERVICES aggregator"
            [ "${{ needs.detect-changes.outputs.discovery_server }}" = "true" ] && APP_SERVICES="$APP_SERVICES discovery-server"

            if [ -n "$APP_SERVICES" ]; then
              echo "📦 Pulling changed application services: $APP_SERVICES"
              docker compose -f docker-compose.yml pull $APP_SERVICES

              echo "🚀 Recreating only CHANGED services (no deps, no pull at up):"
              docker compose -f docker-compose.yml up -d --no-deps --pull never $APP_SERVICES
            else
              if [ "${{ needs.detect-changes.outputs.deploy_files }}" = "true" ]; then
                echo "🛠 Only docker-compose.yml changed. Re-applying stack WITHOUT pulling or recreating:"
                docker compose -f docker-compose.yml up -d --no-recreate --pull never
              else
                echo "✅ No application service changes detected. Skipping pull/up."
              fi
            fi

            echo "✅ Deployment complete."
            docker compose -f docker-compose.yml ps

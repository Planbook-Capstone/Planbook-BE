name: Build & Deploy All Microservices

on:
  push:
    branches:
      - master

jobs:
  build-auth-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: auth-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Verify JAR content includes keys
        run: |
          jar tf target/*.jar | grep keys/private.pem
          jar tf target/*.jar | grep keys/public.pem

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Auth-service image
        run: |
          docker build -t minhlola28/planbook-auth-service:latest .
          docker push minhlola28/planbook-auth-service:latest

  build-api-gateway:
    runs-on: ubuntu-latest
    needs: build-auth-service
    defaults:
      run:
        working-directory: api-gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push API Gateway image
        run: |
          docker build -t minhlola28/planbook-api-gateway:latest .
          docker push minhlola28/planbook-api-gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-auth-service
      - build-api-gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure deploy folder exists
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /var/www/planbook-be

      - name: Create .env file for Compose
        run: |
          cat <<EOF > deploy/.env
          SPRING_DATASOURCE_URL=${{ secrets.DB_URL }}
          SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
          SUPABASE_JWT_SECRET_KEY=${{ secrets.SUPABASE_JWT_SECRET_KEY }}
          SPRING_APP_SECRET_KEY=${{ secrets.SPRING_APP_SECRET_KEY }}
          KAFKA_TOPIC=${{ secrets.KAFKA_TOPIC }}
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_PORT=${{ secrets.MAIL_PORT }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          APP_DURATION=${{ secrets.APP_DURATION }}
          SPRING_JWT_PRIVATE_KEY_PATH=${{ secrets.PRIVATE_KEY_PATH }}
          SPRING_JWT_PUBLIC_KEY_PATH=${{ secrets.PUBLIC_KEY_PATH }}
          SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=${{ secrets.SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI }}
          EOF

      - name: Copy docker-compose.yml and .env to VPS
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deploy/docker-compose.yml,deploy/.env"
          target: "/var/www/planbook-be/"
          strip_components: 1

      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker login -u minhlola28 -p ${{ secrets.DOCKERHUB_PASSWORD }}
            cd /var/www/planbook-be
            docker ps -a --filter "status=created" -q | xargs -r docker rm
            docker compose pull --ignore-buildable
            docker compose up -d --no-build --no-recreate --remove-orphans

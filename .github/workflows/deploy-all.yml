name: Build & Deploy All Microservices

on:
  push:
    branches:
      - master

jobs:
  # Discovery Server
  build-discovery-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: discovery-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Discovery Server image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-discovery-server:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-discovery-server:latest

  # Identity Service
  build-identity-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: identity-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Verify JAR content includes keys
        run: |
          jar tf target/*.jar | grep keys/private.pem
          jar tf target/*.jar | grep keys/public.pem

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Identity Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-identity-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-identity-service:latest

  # API Gateway
  build-api-gateway:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: PlanBook-Gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push API Gateway image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-gateway:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-gateway:latest

  # Master Data Service
  build-master-data-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: master-data-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Master Data Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-master-data-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-master-data-service:latest

  # Purchase Service
  build-purchase-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: purchase-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Purchase Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-purchase-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-purchase-service:latest

  # Exam Service
  build-exam-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: exam-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Exam Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-exam-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-exam-service:latest

  # External Caller Service
  build-external-caller-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: external-caller-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push External Caller Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-external-caller-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-external-caller-service:latest

  # External Tool Config Service
  build-external-tool-config-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: external-tool-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push External Tool Config Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-external-tool-config-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-external-tool-config-service:latest

  # Slide Template Service
  build-slide-template-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: slide-template-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Slide Template Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-slide-template-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-slide-template-service:latest

  # Websocket Service
  build-websocket-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: websocket-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Websocket Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-websocket-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-websocket-service:latest

  # Academic Resource Service
  build-academic-resource-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: academic-resource-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Academic Resource Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-academic-resource-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-academic-resource-service:latest

  # Lesson Plan Template Service
  build-lesson-plan-template-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: lesson-plan-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Lesson Plan Template Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-lesson-plan-template-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-lesson-plan-template-service:latest

  # Tool Log Service
  build-tool-log-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tool-log-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Tool Log Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-tool-log-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-tool-log-service:latest

  # Workspace Service
  build-workspace-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: workspace-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Write RSA Private/Public Keys to file
        run: |
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Workspace Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-workspace-service:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-workspace-service:latest

  # Aggregator Service
  build-aggregator:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: PlanBook-Aggregator
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Aggregator Service image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/planbook-aggregator:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/planbook-aggregator:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-discovery-server
      - build-identity-service
      - build-api-gateway
      - build-master-data-service
      - build-purchase-service
      - build-exam-service
      - build-external-caller-service
      - build-external-tool-config-service
      - build-slide-template-service
      - build-websocket-service
      - build-academic-resource-service
      - build-lesson-plan-template-service
      - build-tool-log-service
      - build-workspace-service
      - build-aggregator
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure deploy folder exists
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /var/www/planbook-be

      - name: Copy docker-compose.yml and .env to VPS
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            deploy/docker-compose.yml
            .env
          target: "/var/www/planbook-be/"
          strip_components: 1

      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

            cd /var/www/planbook-be

             # Bảo đảm docker compose v2 có sẵn; fallback sang docker-compose nếu cần
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              echo "Docker Compose chưa được cài trên VPS" >&2
              exit 1
            fi

            echo "🧹 Stopping and removing old containers..."
            $DC down --remove-orphans || true

            echo "🧹 Removing old images..."
            docker image prune -af || true

            echo "📦 Pulling latest images..."
            $DC pull

            echo "🚀 Starting all services..."
            $DC up -d --remove-orphans

            echo "📊 Service status:"
            $DC ps
# # .github/workflows/main-deploy.yml
# name: Deploy All Services

# on:
#   push:
#     branches:
#       - master
#   workflow_dispatch: # Cho phép trigger thủ công

# jobs:
#   # Job để detect changes trong các service
#   detect-changes:
#     runs-on: ubuntu-latest
#     outputs:
#       api-gateway-changed: ${{ steps.changes.outputs.api-gateway }}
#       auth-service-changed: ${{ steps.changes.outputs.auth-service }}
#       backend-changed: ${{ steps.changes.outputs.backend }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 2 # Cần để so sánh với commit trước

#       - name: Detect changes
#         id: changes
#         run: |
#           # Kiểm tra thay đổi trong từng service
#           if git diff --name-only HEAD~1 HEAD | grep -E '^api-gateway/|^\.github/workflows/deploy-api-gateway\.yml' > /dev/null; then
#             echo "api-gateway=true" >> $GITHUB_OUTPUT
#           else
#             echo "api-gateway=false" >> $GITHUB_OUTPUT
#           fi
          
#           if git diff --name-only HEAD~1 HEAD | grep -E '^auth-service/|^\.github/workflows/deploy-auth-service\.yml' > /dev/null; then
#             echo "auth-service=true" >> $GITHUB_OUTPUT
#           else
#             echo "auth-service=false" >> $GITHUB_OUTPUT
#           fi
          
#           if git diff --name-only HEAD~1 HEAD | grep -E '^(src/|pom\.xml|Dockerfile|\.github/workflows/deploy-backend\.yml)' > /dev/null; then
#             echo "backend=true" >> $GITHUB_OUTPUT
#           else
#             echo "backend=false" >> $GITHUB_OUTPUT
#           fi

#   # Deploy Backend Service
#   deploy-backend:
#     needs: detect-changes
#     if: needs.detect-changes.outputs.backend-changed == 'true'
#     uses: ./.github/workflows/deploy-backend.yml
#     secrets: inherit

#   # Deploy API Gateway
#   deploy-api-gateway:
#     needs: detect-changes
#     if: needs.detect-changes.outputs.api-gateway-changed == 'true'
#     uses: ./.github/workflows/deploy-api-gateway.yml
#     secrets: inherit

#   # Deploy Auth Service
#   deploy-auth-service:
#     needs: detect-changes
#     if: needs.detect-changes.outputs.auth-service-changed == 'true'
#     uses: ./.github/workflows/deploy-auth-service.yml
#     secrets: inherit

#   # Job notification kết quả
#   notify-result:
#     runs-on: ubuntu-latest
#     needs: [detect-changes, deploy-backend, deploy-api-gateway, deploy-auth-service]
#     if: always()
#     steps:
#       - name: Print deployment summary
#         run: |
#           echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
#           echo "| Service | Changed | Status |" >> $GITHUB_STEP_SUMMARY
#           echo "|---------|---------|--------|" >> $GITHUB_STEP_SUMMARY
#           echo "| Backend | ${{ needs.detect-changes.outputs.backend-changed }} | ${{ needs.deploy-backend.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
#           echo "| API Gateway | ${{ needs.detect-changes.outputs.api-gateway-changed }} | ${{ needs.deploy-api-gateway.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
#           echo "| Auth Service | ${{ needs.detect-changes.outputs.auth-service-changed }} | ${{ needs.deploy-auth-service.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY



# .github/workflows/deploy-backend.yml
name: Deploy Backend Service

on:
  workflow_call: # Cho phép được gọi từ workflow khác
  push:
    branches:
      - master
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # ==========================================================
      # BƯỚC QUAN TRỌNG: TẠO FILE KEY TRƯỚC KHI MAVEN PACKAGE
      # ==========================================================
      - name: Write RSA Private/Public Keys to file
        run: |
          # Đảm bảo thư mục này được tạo trong src/main/resources
          # để Maven có thể đóng gói chúng vào JAR.
          mkdir -p src/main/resources/keys
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > src/main/resources/keys/private.pem
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > src/main/resources/keys/public.pem
        # Ensure this step runs before 'Maven Clean and Package'

      - name: Maven Clean and Package
        run: mvn clean package -DskipTests
        # Sau bước này, file JAR (target/your-app-name.jar) sẽ chứa
        # các file private.pem và public.pem trong thư mục /keys/
        # bên trong JAR.

      # ==========================================================
      # CÁC BƯỚC CÒN LẠI KHÔNG CẦN TRUYỀN THÊM BIẾN MÔI TRƯỜNG CHO KEY
      # ==========================================================
      - name: Create docker-compose.yml on runner
        run: |
          cat <<EOF > docker-compose.yml
          version: '3.8'
          name: planbook-backend-stack

          services:
            zookeeper:
              image: zookeeper:latest
              container_name: planbook-zookeeper
              restart: always
              ports:
                - "2181:2181"
              environment:
                ZOO_CLIENT_PORT: 2181
              volumes:
                - zookeeper_data:/data
                - zookeeper_datalog:/datalog
              networks:
                - planbook-network

            kafka:
              image: confluentinc/cp-kafka:7.5.0
              container_name: planbook-kafka
              restart: always
              ports:
                - "9092:9092"
              environment:
                KAFKA_BROKER_ID: 1
                KAFKA_ZOOKEEPER_CONNECT: planbook-zookeeper:2181
                KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://planbook-kafka:29092,PLAINTEXT_HOST://${{ secrets.VPS_HOST }}:9092
                KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
                KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
                KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
              volumes:
                - kafka_data:/var/lib/kafka/data
              depends_on:
                - zookeeper
              networks:
                - planbook-network

            kafdrop:
              image: obsidiandynamics/kafdrop:latest
              container_name: planbook-kafdrop
              restart: always
              ports:
                - "9000:9000"
              environment:
                KAFKA_BROKERCONNECT: planbook-kafka:29092
                JVM_OPTS: "-Xms16M -Xmx48M"
              depends_on:
                - kafka
              networks:
                - planbook-network

            redis:
              image: redis:latest
              container_name: planbook-redis
              restart: always
              ports:
                - "6379:6379"
              volumes:
                - redis_data:/data
              networks:
                - planbook-network

            backend:
              build:
                context: .
                dockerfile: Dockerfile
              image: planbook-be:latest
              container_name: planbook-be
              restart: always
              ports:
                - "8081:8080" # Chuyển backend sang port 8081 để tránh conflict với API Gateway
              environment:
                SPRING_JWT_PRIVATE_KEY_PATH: "${{ secrets.PRIVATE_KEY_PATH }}"
                SPRING_JWT_PUBLIC_KEY_PATH: "${{ secrets.PUBLIC_KEY_PATH }}"
                SPRING_DATASOURCE_URL: "${{ secrets.DB_URL }}"
                SPRING_DATASOURCE_USERNAME: "${{ secrets.DB_USERNAME }}"
                SPRING_DATASOURCE_PASSWORD: "${{ secrets.DB_PASSWORD }}"
                SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: "org.hibernate.dialect.MySQL8Dialect"
                SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
                SPRING_MAIN_ALLOW_CIRCULAR_REFERENCES: "true"
                SPRING_MVC_PATHMATCH_MATCHING_STRATEGY: "ANT_PATH_MATCHER"
                SUPABASE_JWT_SECRET: "${{ secrets.SUPABASE_JWT_SECRET_KEY }}"
                SPRING_SECRETKEY: "${{ secrets.SPRING_APP_SECRET_KEY }}"
                SPRING_KAFKA_BOOTSTRAP_SERVERS: "planbook-kafka:29092"
                KAFKA_TOPIC_NAME: "${{ secrets.KAFKA_TOPIC }}"
                SPRING_MAIL_HOST: "${{ secrets.MAIL_HOST }}"
                SPRING_MAIL_PORT: "${{ secrets.MAIL_PORT }}"
                SPRING_MAIL_USERNAME: "${{ secrets.MAIL_USERNAME }}"
                SPRING_MAIL_PASSWORD: "${{ secrets.MAIL_PASSWORD }}"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: "true"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: "true"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED: "true"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_CONNECTIONTIMEOUT: "5000"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_TIMEOUT: "5000"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_WRITETIMEOT: "5000"
                SPRING_MAIL_DEFAULT_ENCODING: "UTF-8"
                SPRING_DATA_REDIS_HOST: "planbook-redis"
                SPRING_DATA_REDIS_PORT: "6379"
                SPRING_CACHE_TYPE: "redis"
                SPRING_DURATION: "${{ secrets.APP_DURATION }}"
                SPRING_PROFILES_ACTIVE: "prod"
                SERVER_PORT: 8080
              depends_on:
                - zookeeper
                - kafka
                - redis
              networks:
                - planbook-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
                interval: 30s
                timeout: 10s
                retries: 3

          volumes:
            zookeeper_data:
            zookeeper_datalog:
            kafka_data:
            redis_data:

          networks:
            planbook-network:
              driver: bridge
          EOF
        shell: bash

      - name: Copy Project Files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: /var/www/backend/

      - name: Stop and Remove Old Backend Stack on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Tạo thư mục nếu chưa có
            sudo mkdir -p /var/www/backend
            sudo chown -R ${{ secrets.VPS_USER }}:${{ secrets.VPS_USER }} /var/www/backend
            
            cd /var/www/backend || { echo "Error: /var/www/backend directory not found on VPS."; exit 1; }
            
            echo "Checking and freeing up ports..."
            PORTS_TO_FREE="8081 9092 2181 6379 9000"
            for PORT in $PORTS_TO_FREE; do
              PID_ON_PORT=$(sudo lsof -t -i :$PORT 2>/dev/null || true)
              if [ -n "$PID_ON_PORT" ]; then
                echo "Found process on port $PORT with PID: $PID_ON_PORT. Attempting to kill it..."
                sudo kill -9 $PID_ON_PORT 2>/dev/null || true
                sleep 1
              fi
            done

            echo "Stopping and removing old backend stack if it exists..."
            docker compose -f docker-compose.yml --project-name planbook-backend-stack down --remove-orphans 2>/dev/null || true

            echo "Cleaning up old backend images..."
            docker rmi planbook-be:latest 2>/dev/null || true

            echo "Pruning unused Docker resources..."
            docker system prune -f 2>/dev/null || true

            echo "Old backend stack cleaned up."

      - name: Start Backend Stack with Docker Compose on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/backend || { echo "Error: /var/www/backend directory not found on VPS."; exit 1; }
            echo "Building and starting Backend Docker Compose services..."
            docker compose -f docker-compose.yml --project-name planbook-backend-stack up --build -d --remove-orphans
            
            echo "Waiting for services to be ready..."
            sleep 30
            
            echo "Checking service health..."
            docker compose -f docker-compose.yml --project-name planbook-backend-stack ps
            
            echo "Backend services started successfully!"
            echo "Backend: http://${{ secrets.VPS_HOST }}:8081"
            echo "Kafka: ${{ secrets.VPS_HOST }}:9092"
            echo "Kafdrop: http://${{ secrets.VPS_HOST }}:9000"
            echo "Redis: ${{ secrets.VPS_HOST }}:6379"
            echo ""
            echo "Use 'docker compose -f docker-compose.yml --project-name planbook-backend-stack logs -f planbook-be' to monitor backend logs."